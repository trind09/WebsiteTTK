using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

/// <summary>
/// Summary description for DeliveryHelper
/// </summary>
public class DeliveryHelper
{
    /// <summary>
    /// Return all available delivery methods
    /// </summary>
    /// <returns></returns>
    public static List<delivery_methods> GetAllDeliveryMethods()
    {
        try
        {
            using (var context = new WebsiteTTKEntities())
            {
                return context.delivery_methods.ToList();
            }
        } catch (Exception ex)
        {
            LogHelper.Log("\\App_Code\\Helper\\DeliveryHelper.cs", LogHelper.ErrorType.Error, ex);
            return null;
        }
    }

    /// <summary>
    /// Get order's delivery method
    /// </summary>
    /// <param name="delivery_id">Delivery Id</param>
    /// <returns></returns>
    public static delivery_methods GetDeliveryMethodById(int? delivery_id)
    {
        try
        {
            using (var context = new WebsiteTTKEntities())
            {
                if (delivery_id != null)
                {
                    return context.delivery_methods.FirstOrDefault(x => x.delivery_id == delivery_id);
                } else
                {
                    return null;
                }
            }
        }
        catch (Exception ex)
        {
            LogHelper.Log("\\App_Code\\Helper\\DeliveryHelper.cs", LogHelper.ErrorType.Error, ex);
            return null;
        }
    }

    public static DeliveryModel GetDeliveryModel(order order)
    {
        DeliveryModel model = new DeliveryModel();
        //
        // First access the connection string.
        // ... This may be autogenerated in Visual Studio.
        //
        string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
        //
        // In a using statement, acquire the SqlConnection as a resource.
        //
        using (System.Data.SqlClient.SqlConnection con = new System.Data.SqlClient.SqlConnection(connectionString))
        {
            con.Open();
            //Query to get delivery methods
            string query = "SELECT * from sales.delivery_methods;";

            //Query to get selected delivery method
            query += "select * from sales.delivery_methods del where del.delivery_id = '" + order.delivery_id + "';";

            //Query to get currency
            query += "select * from production.currency where currency_id = '" + order.currency_id + "';";

            using (System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand(query, con))
            {
                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter();
                System.Data.DataSet ds = new System.Data.DataSet();
                try
                {
                    adapter.SelectCommand = command;
                    adapter.Fill(ds);

                    //Init variable to use during get data from cell
                    int? nullableInteger = null;
                    Decimal? nullableDecimal = null;

                    var deliveryMethodsTable = ds.Tables[0];

                    if (deliveryMethodsTable.Rows.Count > 0)
                    {
                        List<delivery_methods> deliveryMethods = new List<delivery_methods>();
                        foreach (System.Data.DataRow item in deliveryMethodsTable.Rows)
                        {
                            delivery_methods method = new delivery_methods();

                            method.delivery_id = Int32.Parse(item["delivery_id"].ToString());
                            method.delivery_name = item["delivery_name"] + "";
                            method.delievery_description = item["delievery_description"] + "";
                            method.delivery_time = item["delivery_time"].ToString() == "" ? nullableInteger : Int32.Parse(item["delivery_time"] + "");
                            method.delivery_time_unit = item["delivery_time_unit"] + "";
                            method.delivery_cost = item["delivery_cost"].ToString() == "" ? nullableDecimal : Decimal.Parse(item["delivery_cost"] + "");
                            deliveryMethods.Add(method);
                        }
                        model.DeliveryMethods = deliveryMethods;
                    }

                    var selectedMethodTable = ds.Tables[1];
                    if (selectedMethodTable.Rows.Count > 0)
                    {
                        var item = selectedMethodTable.Rows[0];
                        delivery_methods method = new delivery_methods();
                        method.delivery_id = Int32.Parse(item["delivery_id"].ToString());
                        method.delivery_name = item["delivery_name"] + "";
                        method.delievery_description = item["delievery_description"] + "";
                        method.delivery_time = item["delivery_time"].ToString() == "" ? nullableInteger : Int32.Parse(item["delivery_time"] + "");
                        method.delivery_time_unit = item["delivery_time_unit"] + "";
                        method.delivery_cost = item["delivery_cost"].ToString() == "" ? nullableDecimal : Decimal.Parse(item["delivery_cost"] + "");
                        model.DeliveryMethod = method;
                    }

                    var currencyTable = ds.Tables[2];
                    if (currencyTable.Rows.Count > 0)
                    {
                        var item = currencyTable.Rows[0];
                        currency currency = new currency();
                        currency.currency_id = Int32.Parse(item["currency_id"].ToString());
                        currency.currency_name = item["currency_name"] + "";
                        currency.currency_code = item["currency_code"] + "";
                        currency.currency_symbol = item["currency_symbol"] + "";
                        model.Currency = currency;
                    }

                    return model;
                }
                catch (Exception ex)
                {
                    LogHelper.Log("App_Code\\ProductHelper.cs", LogHelper.ErrorType.Error, ex);
                    return null;
                }
                finally
                {
                    adapter.Dispose();
                    command.Dispose();
                    con.Close();
                }
            }

        }
    }
}