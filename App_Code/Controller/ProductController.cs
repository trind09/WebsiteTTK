using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

/// <summary>
/// Summary description for HomeController
/// </summary>
public class ProductController
{
    /// <summary>
    /// Return featured products
    /// Call "ProductController" to get home page data "GetHomePageData" to return "Featured Products (ProductCurrency)"
    /// </summary>
    /// <returns>ProductControllerModel</returns>
    public static ProductControllerModel GetHomePageData()
    {
        ProductControllerModel homeModel = new ProductControllerModel();
        //
        // First access the connection string.
        // ... This may be autogenerated in Visual Studio.
        //
        string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
        //
        // In a using statement, acquire the SqlConnection as a resource.
        //
        using (System.Data.SqlClient.SqlConnection con = new System.Data.SqlClient.SqlConnection(connectionString))
        {
            con.Open();
            string query = "SELECT pro.*, cur.currency_name, cur.currency_code, cur.currency_symbol FROM production.products pro"
                + " left join production.currency cur on pro.currency_id = cur.currency_id"
                + " where pro.is_featured = 1 and pro.is_publish = 1";
            using (System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand(query, con))
            {
                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter();
                System.Data.DataSet ds = new System.Data.DataSet();
                try
                {
                    adapter.SelectCommand = command;
                    adapter.Fill(ds);

                    //Init variable to use during get data from cell
                    int? nullableInteger = null;
                    DateTime? nullableDateTime = null;
                    bool? nullableBool = null;
                    string globalDateTimeFormat = System.Configuration.ConfigurationManager.AppSettings["GlobalDateTimeFormat"];

                    //Get default currency from web.config
                    string defaultCurrency = System.Configuration.ConfigurationManager.AppSettings["DefaultCurrency"];
                    string[] defaultCurrencyInfo = defaultCurrency.Split(',');
                    string defaultCurrencyName = defaultCurrencyInfo[0];
                    string defaultCurrencyCode = defaultCurrencyInfo[1];
                    string defaultCurrencySymbol = defaultCurrencyInfo[2];

                    var featuredProductsTable = ds.Tables[0];

                    if (featuredProductsTable.Rows.Count > 0)
                    {
                        List<ProductCurrency> featuredProducts = new List<ProductCurrency>();
                        foreach (System.Data.DataRow item in featuredProductsTable.Rows)
                        {
                            //Defined a new fetured product class
                            ProductCurrency productModel = new ProductCurrency();

                            productModel.product_id = Int32.Parse(item["product_id"].ToString());
                            productModel.product_name = item["product_name"] + "";
                            productModel.product_description = item["product_description"] + "";
                            productModel.product_images = item["product_images"] + "";
                            productModel.brand_id = Int32.Parse(item["brand_id"] + "");
                            productModel.category_id = Int32.Parse(item["category_id"] + "");
                            productModel.model_year = Int32.Parse(item["model_year"] + "");
                            productModel.list_price = Decimal.Parse(item["list_price"] + "");
                            productModel.create_date = item["create_date"].ToString() == "" ? nullableDateTime : (DateTime)item["create_date"];
                            productModel.create_by = item["create_by"] + "";
                            productModel.is_publish = item["is_publish"].ToString() == "" ? nullableBool : bool.Parse(item["is_publish"] + "");
                            productModel.is_featured = item["is_featured"].ToString() == "" ? nullableBool : bool.Parse(item["is_featured"] + "");
                            productModel.is_sale = item["is_sale"].ToString() == "" ? nullableBool : bool.Parse(item["is_sale"] + "");
                            productModel.is_new = item["is_new"].ToString() == "" ? nullableBool : bool.Parse(item["is_new"] + "");
                            productModel.is_gift = item["is_gift"].ToString() == "" ? nullableBool : bool.Parse(item["is_gift"] + "");
                            productModel.colour_id = item["colour_id"].ToString() == "" ? nullableInteger : Int32.Parse(item["colour_id"] + "");
                            productModel.currency_id = item["currency_id"].ToString() == "" ? nullableInteger : Int32.Parse(item["currency_id"] + "");
                            if (item["currency_id"].ToString() == "")
                            {
                                productModel.currency_name = defaultCurrencyName;
                                productModel.currency_code = defaultCurrencyCode;
                                productModel.currency_symbol = defaultCurrencySymbol;
                            }
                            else
                            {
                                productModel.currency_name = item["currency_name"] + "";
                                productModel.currency_code = item["currency_code"] + "";
                                productModel.currency_symbol = item["currency_symbol"] + "";
                            }
                            featuredProducts.Add(productModel);
                        }
                        homeModel.FeaturedProducts = featuredProducts;

                        return homeModel;
                    }
                }
                catch (Exception ex)
                {
                    LogHelper.Log("App_Code\\ProductHelper.cs", LogHelper.ErrorType.Error, ex);
                    return null;
                }
                finally
                {
                    adapter.Dispose();
                    command.Dispose();
                    con.Close();
                }
            }

        }
        return null;
    }

    /// <summary>
    /// Get product detail include category belong to product and categories with same store
    /// Call "ProductController" to get product detail data "GetProductDetailData" to return "Product Detail (ProductCurrency), Product's category detail (procategory), Store's categories (CategoryProduct)"
    /// </summary>
    /// <param name="product_id"></param>
    /// <returns>ProductControllerModel</returns>
    public static ProductControllerModel GetProductDetailData(int product_id)
    {
        ProductControllerModel homeModel = new ProductControllerModel();

        string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
        //
        // In a using statement, acquire the SqlConnection as a resource.
        //
        using (System.Data.SqlClient.SqlConnection con = new System.Data.SqlClient.SqlConnection(connectionString))
        {
            con.Open();
            //Query to get this product detail
            string query = "SELECT pro.*, cur.currency_name, cur.currency_code, cur.currency_symbol FROM production.products pro"
                + " left join production.currency cur on pro.currency_id = cur.currency_id"
                + " where pro.product_id = " + product_id + "; ";
            //Query to get category that belong to this product
            query += "select * from production.procategories cat left join production.products pro on cat.category_id = pro.category_id where pro.product_id = " + product_id + "; ";
            using (System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand(query, con))
            {
                System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter();
                System.Data.DataSet ds = new System.Data.DataSet();
                try
                {
                    adapter.SelectCommand = command;
                    adapter.Fill(ds);

                    //Init variable to use during get data from cell
                    int? nullableInteger = null;
                    DateTime? nullableDateTime = null;
                    bool? nullableBool = null;
                    string globalDateTimeFormat = System.Configuration.ConfigurationManager.AppSettings["GlobalDateTimeFormat"];

                    //Get default currency from web.config
                    string defaultCurrency = System.Configuration.ConfigurationManager.AppSettings["DefaultCurrency"];
                    string[] defaultCurrencyInfo = defaultCurrency.Split(',');
                    string defaultCurrencyName = defaultCurrencyInfo[0];
                    string defaultCurrencyCode = defaultCurrencyInfo[1];
                    string defaultCurrencySymbol = defaultCurrencyInfo[2];

                    //get product detail
                    var productDetailTable = ds.Tables[0];
                    if (productDetailTable.Rows.Count > 0)
                    {
                        System.Data.DataRow item = productDetailTable.Rows[0];
                        ProductCurrency productDeatail = new ProductCurrency();

                        productDeatail.product_id = Int32.Parse(item["product_id"].ToString());
                        productDeatail.product_name = item["product_name"] + "";
                        productDeatail.product_description = item["product_description"] + "";
                        productDeatail.product_images = item["product_images"] + "";
                        productDeatail.brand_id = Int32.Parse(item["brand_id"] + "");
                        productDeatail.category_id = Int32.Parse(item["category_id"] + "");
                        productDeatail.model_year = Int32.Parse(item["model_year"] + "");
                        productDeatail.list_price = Decimal.Parse(item["list_price"] + "");
                        productDeatail.create_date = item["create_date"].ToString() == "" ? nullableDateTime : (DateTime)item["create_date"];
                        productDeatail.create_by = item["create_by"] + "";
                        productDeatail.is_publish = item["is_publish"].ToString() == "" ? nullableBool : bool.Parse(item["is_publish"] + "");
                        productDeatail.is_featured = item["is_featured"].ToString() == "" ? nullableBool : bool.Parse(item["is_featured"] + "");
                        productDeatail.is_sale = item["is_sale"].ToString() == "" ? nullableBool : bool.Parse(item["is_sale"] + "");
                        productDeatail.is_new = item["is_new"].ToString() == "" ? nullableBool : bool.Parse(item["is_new"] + "");
                        productDeatail.is_gift = item["is_gift"].ToString() == "" ? nullableBool : bool.Parse(item["is_gift"] + "");
                        productDeatail.colour_id = item["colour_id"].ToString() == "" ? nullableInteger : Int32.Parse(item["colour_id"] + "");
                        productDeatail.currency_id = item["currency_id"].ToString() == "" ? nullableInteger : Int32.Parse(item["currency_id"] + "");
                        if (item["currency_id"].ToString() == "")
                        {
                            productDeatail.currency_name = defaultCurrencyName;
                            productDeatail.currency_code = defaultCurrencyCode;
                            productDeatail.currency_symbol = defaultCurrencySymbol;
                        }
                        else
                        {
                            productDeatail.currency_name = item["currency_name"] + "";
                            productDeatail.currency_code = item["currency_code"] + "";
                            productDeatail.currency_symbol = item["currency_symbol"] + "";
                        }
                        homeModel.Product = productDeatail;
                    }

                    //get category detail
                    var categoryDetailTable = ds.Tables[1];
                    if (categoryDetailTable.Rows.Count > 0)
                    {
                        System.Data.DataRow item = categoryDetailTable.Rows[0];

                        procategory category = new procategory();

                        category.category_id = Int32.Parse(item["product_id"].ToString());
                        category.category_name = item["category_name"] + "";
                        category.category_description = item["category_description"] + "";
                        category.category_images = item["category_images"] + "";
                        category.category_url = item["category_url"] + "";
                        category.create_date = item["create_date"].ToString() == "" ? nullableDateTime : (DateTime)item["create_date"];
                        category.parent_id = item["parent_id"].ToString() == "" ? nullableInteger : Int32.Parse(item["parent_id"] + "");
                        category.is_publish = item["is_publish"].ToString() == "" ? nullableBool : bool.Parse(item["is_publish"] + "");
                        category.is_menu = item["is_menu"].ToString() == "" ? nullableBool : bool.Parse(item["is_menu"] + "");
                        category.is_label = item["is_label"].ToString() == "" ? nullableBool : bool.Parse(item["is_label"] + "");
                        category.store_id = item["store_id"].ToString() == "" ? nullableInteger : Int32.Parse(item["store_id"] + "");

                        homeModel.Category = category;

                        //get category with same store id
                        query = "with LastResult As (SELECT c.category_id,c.category_name,c.category_description,c.category_images,"
                            + "c.category_url,c.create_date,c.parent_id,c.is_publish,c.is_menu,c.is_label,c.store_id,"
                            + "COUNT(p.product_id) AS product_count FROM production.procategories AS c "
                            + "LEFT JOIN production.products AS cp ON cp.category_id=c.category_id "
                            + "LEFT JOIN production.products AS p ON p.product_id=cp.product_id WHERE c.store_id = " + category.store_id + " "
                            + "GROUP BY c.category_id,c.category_name,c.category_description,c.category_images,"
                            + "c.category_url,c.create_date,c.parent_id,c.is_publish,c.is_menu,c.is_label,c.store_id) "
                            + "select  LastResult.category_id,LastResult.category_name,LastResult.category_description,LastResult.category_images,"
                            + "LastResult.category_url,LastResult.create_date,LastResult.parent_id,LastResult.is_publish,"
                            + "LastResult.is_menu,LastResult.is_label,LastResult.store_id,LastResult.product_count from LastResult where LastResult.is_publish = 1;";
                        System.Data.SqlClient.SqlCommand newCommand = new System.Data.SqlClient.SqlCommand(query, con);
                        adapter = new System.Data.SqlClient.SqlDataAdapter();
                        ds = new System.Data.DataSet();
                        adapter.SelectCommand = newCommand;
                        adapter.Fill(ds);

                        var categoriesTable = ds.Tables[0];
                        if (categoriesTable.Rows.Count > 0)
                        {
                            List<CategoryProduct> categories = new List<CategoryProduct>();
                            foreach (System.Data.DataRow row in categoriesTable.Rows)
                            {
                                CategoryProduct cat = new CategoryProduct();
                                cat.category_id = Int32.Parse(row["category_id"].ToString());
                                cat.category_name = row["category_name"] + "";
                                cat.category_description = row["category_description"] + "";
                                cat.category_images = row["category_images"] + "";
                                cat.category_url = row["category_url"] + "";
                                cat.create_date = row["create_date"].ToString() == "" ? nullableDateTime : (DateTime)row["create_date"];
                                cat.parent_id = row["parent_id"].ToString() == "" ? nullableInteger : Int32.Parse(row["parent_id"] + "");
                                cat.is_publish = row["is_publish"].ToString() == "" ? nullableBool : bool.Parse(row["is_publish"] + "");
                                cat.is_menu = row["is_menu"].ToString() == "" ? nullableBool : bool.Parse(row["is_menu"] + "");
                                cat.is_label = row["is_label"].ToString() == "" ? nullableBool : bool.Parse(row["is_label"] + "");
                                cat.store_id = row["store_id"].ToString() == "" ? nullableInteger : Int32.Parse(row["store_id"] + "");
                                cat.product_count = Int32.Parse(row["product_count"].ToString());
                                categories.Add(cat);
                            }

                            homeModel.Categories = categories;
                        }
                    }

                    return homeModel;
                }
                catch (Exception ex)
                {
                    LogHelper.Log("App_Code\\ProductHelper.cs", LogHelper.ErrorType.Error, ex);
                    return null;
                }
                finally
                {
                    adapter.Dispose();
                    command.Dispose();
                    con.Close();
                }
            }

        }
        return null;
    }
}